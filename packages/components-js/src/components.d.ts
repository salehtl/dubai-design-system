/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DdsButton {
        /**
          * Disable the button if true.
         */
        "disabled": boolean;
        /**
          * Indicates the button’s type. Equivalent to the native HTML button `type` attribute.
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The visual variant for the button (emphasis level). "primary" for strong emphasis, "secondary" for lighter emphasis.
         */
        "variant": 'primary' | 'secondary';
    }
}
export interface DdsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdsButtonElement;
}
declare global {
    interface HTMLDdsButtonElementEventMap {
        "ddsClick": MouseEvent;
    }
    interface HTMLDdsButtonElement extends Components.DdsButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDdsButtonElementEventMap>(type: K, listener: (this: HTMLDdsButtonElement, ev: DdsButtonCustomEvent<HTMLDdsButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDdsButtonElementEventMap>(type: K, listener: (this: HTMLDdsButtonElement, ev: DdsButtonCustomEvent<HTMLDdsButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDdsButtonElement: {
        prototype: HTMLDdsButtonElement;
        new (): HTMLDdsButtonElement;
    };
    interface HTMLElementTagNameMap {
        "dds-button": HTMLDdsButtonElement;
    }
}
declare namespace LocalJSX {
    interface DdsButton {
        /**
          * Disable the button if true.
         */
        "disabled"?: boolean;
        /**
          * Fires when the button is clicked (if not disabled).
         */
        "onDdsClick"?: (event: DdsButtonCustomEvent<MouseEvent>) => void;
        /**
          * Indicates the button’s type. Equivalent to the native HTML button `type` attribute.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The visual variant for the button (emphasis level). "primary" for strong emphasis, "secondary" for lighter emphasis.
         */
        "variant"?: 'primary' | 'secondary';
    }
    interface IntrinsicElements {
        "dds-button": DdsButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dds-button": LocalJSX.DdsButton & JSXBase.HTMLAttributes<HTMLDdsButtonElement>;
        }
    }
}
