/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DdsAlert {
        /**
          * The main heading text of the alert.
         */
        "alertTitle": string;
        /**
          * Additional CSS class names to apply to the alert container. Multiple classes can be provided as a space-separated string.
         */
        "customClass"?: string;
        /**
          * The detailed message text of the alert.
         */
        "description": string;
        /**
          * URL for the primary action button. If provided, clicking the primary button will navigate to this URL.
         */
        "primaryLink"?: string;
        /**
          * Text label for the primary action button.
         */
        "primaryText": string;
        /**
          * URL for the secondary action button. If provided, clicking the secondary button will navigate to this URL.
         */
        "secondaryLink"?: string;
        /**
          * Text label for the secondary action button.
         */
        "secondaryText": string;
        /**
          * The visual style type of the alert. 'primary' for stronger emphasis, 'secondary' for lighter emphasis.
         */
        "type": 'primary' | 'secondary';
        /**
          * The semantic variant of the alert that indicates its purpose. - 'info': For general information messages - 'warning': For warning messages that require attention - 'error': For error messages that indicate a problem - 'success': For success messages that confirm a positive outcome
         */
        "variant": 'info' | 'warning' | 'error' | 'success';
    }
    interface DdsButton {
        /**
          * The appearance style of the button. "solid" for filled background, "outline" for bordered style.
         */
        "appearance": 'solid' | 'outline';
        /**
          * If true, displays the button in a compact size with reduced padding.
         */
        "compact": boolean;
        /**
          * Disable the button if true.
         */
        "disabled": boolean;
        /**
          * Indicates the button's type. Equivalent to the native HTML button `type` attribute.
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The visual variant for the button (emphasis level). "primary" for strong emphasis, "secondary" for lighter emphasis.
         */
        "variant": 'primary' | 'secondary';
    }
    interface DdsLink {
        /**
          * An optional label for screen readers if  the link text is not descriptive enough.
         */
        "customAriaLabel"?: string;
        /**
          * If true, the link becomes visually and functionally disabled.  It wonâ€™t be clickable or navigable.
         */
        "disabled": boolean;
        /**
          * If true, the link will prompt for download  rather than navigating to the resource.
         */
        "download": boolean;
        /**
          * The URL that the hyperlink points to.
         */
        "href"?: string;
        /**
          * Specifies the relationship between the current document  and the linked document (e.g., 'noopener', 'noreferrer').
         */
        "rel"?: string;
        /**
          * Specifies where to open the linked document:  _blank, _self, _parent, _top, or a frame name.
         */
        "target"?: string;
    }
}
export interface DdsAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdsAlertElement;
}
export interface DdsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdsButtonElement;
}
declare global {
    interface HTMLDdsAlertElementEventMap {
        "closeEvent": void;
    }
    interface HTMLDdsAlertElement extends Components.DdsAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDdsAlertElementEventMap>(type: K, listener: (this: HTMLDdsAlertElement, ev: DdsAlertCustomEvent<HTMLDdsAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDdsAlertElementEventMap>(type: K, listener: (this: HTMLDdsAlertElement, ev: DdsAlertCustomEvent<HTMLDdsAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDdsAlertElement: {
        prototype: HTMLDdsAlertElement;
        new (): HTMLDdsAlertElement;
    };
    interface HTMLDdsButtonElementEventMap {
        "ddsClick": MouseEvent;
    }
    interface HTMLDdsButtonElement extends Components.DdsButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDdsButtonElementEventMap>(type: K, listener: (this: HTMLDdsButtonElement, ev: DdsButtonCustomEvent<HTMLDdsButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDdsButtonElementEventMap>(type: K, listener: (this: HTMLDdsButtonElement, ev: DdsButtonCustomEvent<HTMLDdsButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDdsButtonElement: {
        prototype: HTMLDdsButtonElement;
        new (): HTMLDdsButtonElement;
    };
    interface HTMLDdsLinkElement extends Components.DdsLink, HTMLStencilElement {
    }
    var HTMLDdsLinkElement: {
        prototype: HTMLDdsLinkElement;
        new (): HTMLDdsLinkElement;
    };
    interface HTMLElementTagNameMap {
        "dds-alert": HTMLDdsAlertElement;
        "dds-button": HTMLDdsButtonElement;
        "dds-link": HTMLDdsLinkElement;
    }
}
declare namespace LocalJSX {
    interface DdsAlert {
        /**
          * The main heading text of the alert.
         */
        "alertTitle"?: string;
        /**
          * Additional CSS class names to apply to the alert container. Multiple classes can be provided as a space-separated string.
         */
        "customClass"?: string;
        /**
          * The detailed message text of the alert.
         */
        "description"?: string;
        /**
          * Event emitted when the close button is clicked.
         */
        "onCloseEvent"?: (event: DdsAlertCustomEvent<void>) => void;
        /**
          * URL for the primary action button. If provided, clicking the primary button will navigate to this URL.
         */
        "primaryLink"?: string;
        /**
          * Text label for the primary action button.
         */
        "primaryText"?: string;
        /**
          * URL for the secondary action button. If provided, clicking the secondary button will navigate to this URL.
         */
        "secondaryLink"?: string;
        /**
          * Text label for the secondary action button.
         */
        "secondaryText"?: string;
        /**
          * The visual style type of the alert. 'primary' for stronger emphasis, 'secondary' for lighter emphasis.
         */
        "type"?: 'primary' | 'secondary';
        /**
          * The semantic variant of the alert that indicates its purpose. - 'info': For general information messages - 'warning': For warning messages that require attention - 'error': For error messages that indicate a problem - 'success': For success messages that confirm a positive outcome
         */
        "variant"?: 'info' | 'warning' | 'error' | 'success';
    }
    interface DdsButton {
        /**
          * The appearance style of the button. "solid" for filled background, "outline" for bordered style.
         */
        "appearance"?: 'solid' | 'outline';
        /**
          * If true, displays the button in a compact size with reduced padding.
         */
        "compact"?: boolean;
        /**
          * Disable the button if true.
         */
        "disabled"?: boolean;
        /**
          * Fires when the button is clicked (if not disabled).
         */
        "onDdsClick"?: (event: DdsButtonCustomEvent<MouseEvent>) => void;
        /**
          * Indicates the button's type. Equivalent to the native HTML button `type` attribute.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The visual variant for the button (emphasis level). "primary" for strong emphasis, "secondary" for lighter emphasis.
         */
        "variant"?: 'primary' | 'secondary';
    }
    interface DdsLink {
        /**
          * An optional label for screen readers if  the link text is not descriptive enough.
         */
        "customAriaLabel"?: string;
        /**
          * If true, the link becomes visually and functionally disabled.  It wonâ€™t be clickable or navigable.
         */
        "disabled"?: boolean;
        /**
          * If true, the link will prompt for download  rather than navigating to the resource.
         */
        "download"?: boolean;
        /**
          * The URL that the hyperlink points to.
         */
        "href"?: string;
        /**
          * Specifies the relationship between the current document  and the linked document (e.g., 'noopener', 'noreferrer').
         */
        "rel"?: string;
        /**
          * Specifies where to open the linked document:  _blank, _self, _parent, _top, or a frame name.
         */
        "target"?: string;
    }
    interface IntrinsicElements {
        "dds-alert": DdsAlert;
        "dds-button": DdsButton;
        "dds-link": DdsLink;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dds-alert": LocalJSX.DdsAlert & JSXBase.HTMLAttributes<HTMLDdsAlertElement>;
            "dds-button": LocalJSX.DdsButton & JSXBase.HTMLAttributes<HTMLDdsButtonElement>;
            "dds-link": LocalJSX.DdsLink & JSXBase.HTMLAttributes<HTMLDdsLinkElement>;
        }
    }
}
